/*
 * Copyright 2017 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.netflix.spinnaker.moniker.frigga

import com.netflix.spinnaker.moniker.Moniker
import spock.lang.Specification
import spock.lang.Unroll

class FriggaReflectiveNamerSpec extends Specification {
  def namer = new FriggaReflectiveNamer()

  @Unroll
  void "names generated by the frigga reflective namer look sane"() {
    expect:
    def moniker = Moniker.builder()
        .app(app)
        .stack(stack)
        .detail(detail)
        .sequence(sequence)
        .build()

    namer.applyMoniker(hasName, moniker)
    result == hasName.getName()

    where:
    hasName                   | app   | stack   | detail   | sequence || result
    new HasName()             | "app" | "stack" | "detail" | 0        || "app-stack-detail-v000"
    new HasName()             | "app" | "stack" | null     | 0        || "app-stack-v000"
    new HasName()             | "app" | null    | "detail" | 0        || "app--detail-v000"
    new HasName()             | "app" | null    | null     | 0        || "app-v000"
    new HasName()             | "app" | "stack" | "detail" | 10       || "app-stack-detail-v010"
    new HasName()             | "app" | "stack" | null     | 10       || "app-stack-v010"
    new HasName()             | "app" | null    | "detail" | 10       || "app--detail-v010"
    new HasName()             | "app" | null    | null     | 10       || "app-v010"
    new HasName()             | "app" | "stack" | "detail" | 100      || "app-stack-detail-v100"
    new HasName()             | "app" | "stack" | null     | 100      || "app-stack-v100"
    new HasName()             | "app" | null    | "detail" | 100      || "app--detail-v100"
    new HasName()             | "app" | null    | null     | 100      || "app-v100"
    new HasName()             | "app" | "stack" | "detail" | null     || "app-stack-detail"
    new HasName()             | "app" | "stack" | null     | null     || "app-stack"
    new HasName()             | "app" | null    | "detail" | null     || "app--detail"
    new HasName()             | "app" | null    | null     | null     || "app"
    new HasNameChild()        | "app" | "stack" | "detail" | 0        || "app-stack-detail-v000"
    new HasNameChild()        | "app" | null    | null     | null     || "app"
    new HasNameMethods()      | "app" | "stack" | "detail" | 0        || "app-stack-detail-v000"
    new HasNameMethods()      | "app" | null    | null     | null     || "app"
    new HasNameMethodsChild() | "app" | "stack" | "detail" | 0        || "app-stack-detail-v000"
    new HasNameMethodsChild() | "app" | null    | null     | null     || "app"
  }

  @Unroll
  void "names parsed by the frigga reflective namer look sane"() {
    expect:
    def moniker = namer.deriveMoniker(input)
    moniker.app == app
    moniker.stack == stack
    moniker.detail == detail
    moniker.sequence == sequence
    moniker.cluster == cluster

    where:
    input                                                  || cluster            | app   | stack   | detail   | sequence
    new HasName(name: "app-stack-detail-v000")             || "app-stack-detail" | "app" | "stack" | "detail" | 0
    new HasName(name: "app-stack-v000")                    || "app-stack"        | "app" | "stack" | null     | 0
    new HasName(name: "app--detail-v000")                  || "app--detail"      | "app" | null    | "detail" | 0
    new HasName(name: "app-v000")                          || "app"              | "app" | null    | null     | 0
    new HasName(name: "app-stack-detail-v010")             || "app-stack-detail" | "app" | "stack" | "detail" | 10
    new HasName(name: "app-stack-v010")                    || "app-stack"        | "app" | "stack" | null     | 10
    new HasName(name: "app--detail-v010")                  || "app--detail"      | "app" | null    | "detail" | 10
    new HasName(name: "app-v010")                          || "app"              | "app" | null    | null     | 10
    new HasName(name: "app-stack-detail-v100")             || "app-stack-detail" | "app" | "stack" | "detail" | 100
    new HasName(name: "app-stack-v100")                    || "app-stack"        | "app" | "stack" | null     | 100
    new HasName(name: "app--detail-v100")                  || "app--detail"      | "app" | null    | "detail" | 100
    new HasName(name: "app-v100")                          || "app"              | "app" | null    | null     | 100
    new HasName(name: "app-stack-detail")                  || "app-stack-detail" | "app" | "stack" | "detail" | null
    new HasName(name: "app-stack")                         || "app-stack"        | "app" | "stack" | null     | null
    new HasName(name: "app--detail")                       || "app--detail"      | "app" | null    | "detail" | null
    new HasName(name: "app")                               || "app"              | "app" | null    | null     | null
    new HasNameChild(name: "app")                          || "app"              | "app" | null    | null     | null
    new HasNameChild(name: "app-stack-detail-v000")        || "app-stack-detail" | "app" | "stack" | "detail" | 0
    new HasNameMethods(name: "app")                        || "app"              | "app" | null    | null     | null
    new HasNameMethods(name: "app-stack-detail-v000")      || "app-stack-detail" | "app" | "stack" | "detail" | 0
    new HasNameMethodsChild(name: "app")                   || "app"              | "app" | null    | null     | null
    new HasNameMethodsChild(name: "app-stack-detail-v000") || "app-stack-detail" | "app" | "stack" | "detail" | 0
  }

  private static class HasName {
    String name
  }

  private static class HasNameChild extends HasName { }

  private static class HasNameMethods {
    String notName
    void setName(String name) {
      notName = name
    }
    String getName() {
      return notName
    }
  }

  private static class HasNameMethodsChild extends HasNameMethods { }
}
